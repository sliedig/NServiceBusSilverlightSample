//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SilverlightClient.OrderPollingService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CancelOrderResponseData", Namespace="http://schemas.datacontract.org/2004/07/ResponseServer")]
    public partial class CancelOrderResponseData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid ConfirmationIdField;
        
        private int OrderIdField;
        
        private SilverlightClient.OrderPollingService.OrderStatus StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ConfirmationId {
            get {
                return this.ConfirmationIdField;
            }
            set {
                if ((this.ConfirmationIdField.Equals(value) != true)) {
                    this.ConfirmationIdField = value;
                    this.RaisePropertyChanged("ConfirmationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderId {
            get {
                return this.OrderIdField;
            }
            set {
                if ((this.OrderIdField.Equals(value) != true)) {
                    this.OrderIdField = value;
                    this.RaisePropertyChanged("OrderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SilverlightClient.OrderPollingService.OrderStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderStatus", Namespace="http://schemas.datacontract.org/2004/07/ResponseServer.Messages")]
    public enum OrderStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cancelled = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PendingCancellation = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CancellationFailed = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OrderPollingService.IOrderPollingService", CallbackContract=typeof(SilverlightClient.OrderPollingService.IOrderPollingServiceCallback))]
    public interface IOrderPollingService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IOrderPollingService/GetOrderCancellations")]
        System.IAsyncResult BeginGetOrderCancellations(System.AsyncCallback callback, object asyncState);
        
        void EndGetOrderCancellations(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderPollingServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IOrderPollingService/ReceiveOrderCancellations")]
        void ReceiveOrderCancellations(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IOrderPollingService/CancelOrderResponse")]
        void CancelOrderResponse(SilverlightClient.OrderPollingService.CancelOrderResponseData pollingResponse);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderPollingServiceChannel : SilverlightClient.OrderPollingService.IOrderPollingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderPollingServiceClient : System.ServiceModel.DuplexClientBase<SilverlightClient.OrderPollingService.IOrderPollingService>, SilverlightClient.OrderPollingService.IOrderPollingService {
        
        private BeginOperationDelegate onBeginGetOrderCancellationsDelegate;
        
        private EndOperationDelegate onEndGetOrderCancellationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrderCancellationsCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public OrderPollingServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public OrderPollingServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public OrderPollingServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public OrderPollingServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public OrderPollingServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public OrderPollingServiceClient(string endpointConfigurationName) : 
                this(new OrderPollingServiceClientCallback(), endpointConfigurationName) {
        }
        
        private OrderPollingServiceClient(OrderPollingServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public OrderPollingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new OrderPollingServiceClientCallback(), binding, remoteAddress) {
        }
        
        private OrderPollingServiceClient(OrderPollingServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public OrderPollingServiceClient() : 
                this(new OrderPollingServiceClientCallback()) {
        }
        
        private OrderPollingServiceClient(OrderPollingServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> GetOrderCancellationsCompleted;
        
        public event System.EventHandler<ReceiveOrderCancellationsReceivedEventArgs> ReceiveOrderCancellationsReceived;
        
        public event System.EventHandler<CancelOrderResponseReceivedEventArgs> CancelOrderResponseReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightClient.OrderPollingService.IOrderPollingService.BeginGetOrderCancellations(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrderCancellations(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverlightClient.OrderPollingService.IOrderPollingService.EndGetOrderCancellations(System.IAsyncResult result) {
            base.Channel.EndGetOrderCancellations(result);
        }
        
        private System.IAsyncResult OnBeginGetOrderCancellations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((SilverlightClient.OrderPollingService.IOrderPollingService)(this)).BeginGetOrderCancellations(callback, asyncState);
        }
        
        private object[] OnEndGetOrderCancellations(System.IAsyncResult result) {
            ((SilverlightClient.OrderPollingService.IOrderPollingService)(this)).EndGetOrderCancellations(result);
            return null;
        }
        
        private void OnGetOrderCancellationsCompleted(object state) {
            if ((this.GetOrderCancellationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrderCancellationsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrderCancellationsAsync() {
            this.GetOrderCancellationsAsync(null);
        }
        
        public void GetOrderCancellationsAsync(object userState) {
            if ((this.onBeginGetOrderCancellationsDelegate == null)) {
                this.onBeginGetOrderCancellationsDelegate = new BeginOperationDelegate(this.OnBeginGetOrderCancellations);
            }
            if ((this.onEndGetOrderCancellationsDelegate == null)) {
                this.onEndGetOrderCancellationsDelegate = new EndOperationDelegate(this.OnEndGetOrderCancellations);
            }
            if ((this.onGetOrderCancellationsCompletedDelegate == null)) {
                this.onGetOrderCancellationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrderCancellationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrderCancellationsDelegate, null, this.onEndGetOrderCancellationsDelegate, this.onGetOrderCancellationsCompletedDelegate, userState);
        }
        
        private void OnReceiveOrderCancellationsReceived(object state) {
            if ((this.ReceiveOrderCancellationsReceived != null)) {
                object[] results = ((object[])(state));
                this.ReceiveOrderCancellationsReceived(this, new ReceiveOrderCancellationsReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnCancelOrderResponseReceived(object state) {
            if ((this.CancelOrderResponseReceived != null)) {
                object[] results = ((object[])(state));
                this.CancelOrderResponseReceived(this, new CancelOrderResponseReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && ((this.ReceiveOrderCancellationsReceived != null) 
                        || (this.CancelOrderResponseReceived != null)))) {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightClient.OrderPollingService.IOrderPollingService CreateChannel() {
            return new OrderPollingServiceClientChannel(this);
        }
        
        private class OrderPollingServiceClientCallback : object, IOrderPollingServiceCallback {
            
            private OrderPollingServiceClient proxy;
            
            public void Initialize(OrderPollingServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void ReceiveOrderCancellations(string sessionId) {
                this.proxy.OnReceiveOrderCancellationsReceived(new object[] {
                            sessionId});
            }
            
            public void CancelOrderResponse(SilverlightClient.OrderPollingService.CancelOrderResponseData pollingResponse) {
                this.proxy.OnCancelOrderResponseReceived(new object[] {
                            pollingResponse});
            }
        }
        
        private class OrderPollingServiceClientChannel : ChannelBase<SilverlightClient.OrderPollingService.IOrderPollingService>, SilverlightClient.OrderPollingService.IOrderPollingService {
            
            public OrderPollingServiceClientChannel(System.ServiceModel.DuplexClientBase<SilverlightClient.OrderPollingService.IOrderPollingService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetOrderCancellations(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetOrderCancellations", _args, callback, asyncState);
                return _result;
            }
            
            public void EndGetOrderCancellations(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("GetOrderCancellations", _args, result);
            }
        }
    }
    
    public class ReceiveOrderCancellationsReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReceiveOrderCancellationsReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string sessionId {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public class CancelOrderResponseReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CancelOrderResponseReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightClient.OrderPollingService.CancelOrderResponseData pollingResponse {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightClient.OrderPollingService.CancelOrderResponseData)(this.results[0]));
            }
        }
    }
}
